= element HardCyt isa QCyt
\symbol HC
\color #55f
\symmetries all
local constant Unsigned cDISTANCE_BITS = 4u;
local typedef Unsigned(cDISTANCE_BITS) Distance;
local typedef EventWindow.SiteNum SiteNum;
local constant Unsigned cCELL_TARGET_DIAMETER = 6u;

== Data members
u Distance mDistances[4];  // WNSE

== Methods
u Unsigned getWidthEstimate() {
.   return (1u + mDistances[0] + mDistances[3]); // us+W+E
. }

u Unsigned getHeightEstimate() {
.   return (1u + mDistances[1] + mDistances[2]); // us+N+S
. }

u Bool shouldImport(Atom atom) {
.   return
.       atom is Res
.    && getWidthEstimate() < cCELL_TARGET_DIAMETER
.    && getHeightEstimate() < cCELL_TARGET_DIAMETER // us+N+S
.   ;
. }

u Bool shouldExport(Atom atom) {
.   return
.       atom is DReg
.   ;
. }

u Unsigned getNgbDirIndex(C2D ngb) {
.    EventWindow ew;
.    SiteNum sn = ew.getSiteNumber(ngb);
.    return sn-1u;
. }

u Unsigned getWestIndex() { 
.    C2D c(-1,0);
.    return getNgbDirIndex(c);
. }

u Unsigned getNorthIndex() {
.    C2D c(0,-1);
.    return getNgbDirIndex(c);
. }


== Rules (Fatal conditions)
given @ isa HardCyt :
.  !$self.mDie &&                                 // Not already dying, and 
.  ($self.getWidthEstimate() >= Distance.maxof || // somehow 
.   $self.getHeightEstimate() >= Distance.maxof)  // oversized
change @ isa QCyt { $self.mDie = true; }

  @ -> @

== Postrules (Update distance estimates)

given @ isa HardCyt
given q isa QMembrane
given h isa HardCyt
let x = q|h
check @ {
.   HardCyt & h = (HardCyt&) ew[0];
.   Unsigned westIdx = h.getWestIndex();
.   if ($q.$nvotes > 0u) h.mDistances[westIdx] = 0u; // Believen my lyin' eyes
.   else if ($h.$nvotes > 0u) {                      // Believen whachu tell me
.     HardCyt & h2 = (HardCyt&) ew[$h.$winsn];
.
.     // Increment in axis direction
.     h.mDistances[westIdx] = (Distance) (h2.mDistances[westIdx]+1u);
.
.     // Max in orthogonal direction
.     Unsigned northIdx = h.getNorthIndex();
.     if (h2.mDistances[northIdx] > h.mDistances[northIdx])
.       h.mDistances[northIdx] = h2.mDistances[northIdx];
.   }
.   return false;  
. }

 x.@ -> ...


== Postrules (Growth)

given @ isa HardCyt

vote e isa Empty
vote r isa Res

change @ {
.   if ($e.$nvotes > 0u && $r.$nvotes > 0u) {
.     ew[$e.$winsn] = ew[0];
.     ew[$r.$winsn] = Empty.instanceof;
.   }
. }

     e        .
    rrr      ...
   er@re -> ..@..
    rrr      ...
     e        .


== Postrules (Maintenance with prejudice)

given @ isa HardCyt
vote w isa HardCyt
vote h isa HardCyt
change @ {
.   if ($w.$nvotes > 0u &&  // If an H is misaligned with us
.       $h.$nvotes > 2u)    // And we have significant support
.     ew[$w.$winsn] = Res.instanceof;// The weirdo decays
. }

     h        .
    www      ...
   hw@wh -> ..@..
    www      ...
     h        .


     @  -> @      # Else hold
