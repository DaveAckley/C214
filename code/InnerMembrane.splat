= element InnerMembrane isa QMembrane
\symbol IM
\color #6789ab
\symmetries all
local constant Int cTIMER_BITS = 3;
local typedef Unsigned(cTIMER_BITS) TimerType;
local typedef XTimer(cTIMER_BITS,TimerType.maxof,8u) LonelyTimer;

== Data members
u Bool mDie = false;
u LonelyTimer mTimer;

== Methods
getColor {
.  if (mDie) return cu.color(0xffffffu); // White for death
.  return super.getColor($selector);
.}

u Bool isWorried() {
.  return mTimer.current() >= TimerType.maxof - 3u; 
.}

== Prerules (Death)
given @ isa InnerMembrane : $self.mDie
given i : true
vote i isa InnerMembrane : $self.mDie = true
check i : true

   iii    ...
   i@i -> ._.
   iii    ...


== Prerules (Drive-by timer management)
scratch 0 = 100
given @ isa InnerMembrane
vote c {
.  if ($curatom is QContent) $0 = -1;
.  else if ($0 >= 0 && $curatom is InnerMembrane) {
.    InnerMembrane & im = (InnerMembrane&) $curatom;
.    LonelyTimer.Counter ctr = im.mTimer.current();
.    if (ctr < $0) $0 = ctr;
.  }
.  return 1u;
.}
vote q isa QContent
check @ {
.  InnerMembrane & im = (InnerMembrane&) ew[0];
.  if ($0 < 0) im.mTimer.reset();
.  else if ($0 + 1 < im.mTimer.current())
.    im.mTimer.set((LonelyTimer.Counter) ($0 + 1));
.  if (im.mTimer.countAlarm()) { im.mDie = true; return true; }
.  return false;
. }

  ccc      ...
  c@c  ->  ...
  ccc      ...

