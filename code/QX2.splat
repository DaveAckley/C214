= element QX2 isa QContent.  Telomere-controlled, Res-based growth regulation
\symbol X2
\color #55f
\symmetries all

== Data members

u typedef Unsigned(3) Generation;
u Generation mGen = 2;  // Grow for 32 total

== Methods
u Bool shouldImport(Atom atom) {
.   DebugUtils du;
.   Bool ret = (mGen < mGen.maxof) && atom is Res;
.   du.print("shouldImport");
.   du.print(atom);
.   du.print(ret);
.   return ret;
. }

== Rules (Membrane repair)
# We should never be adjacent to OuterMembrane

vote o isa OuterMembrane
change i { $curatom = InnerMembrane.instanceof; }

 ooo    ...
 o@o -> .i.  # Sacrifice self in repair attempt
 ooo    ...

== Rules (Seed gradient)
given i isa InnerMembrane : $self.mGradVal == $self.mGradVal.maxof
check @ : random.oneIn(1000)
change i isa InnerMembrane { $self.mGradVal = $self.mGradVal.minof; }

 i@ -> i.

== Rules (Growth)

# This section for immature elements only.  Also in this section, due
# to the check @ below, we can only have rules that are supposed to
# age the telomere when they fire

given @ isa QX2 { return $self.mGen < $self.mGen.maxof; }
given R isa Res

check @ {
.  QX2 & q = (QX2 &) ew[0];
.  ++q.mGen;
.  return true;
. }

change @ { ew[$cursn] = ew[0]; }

  @R -> @@

== Rules (Youthful mixing)
# This section for immature elements only.
given @ isa QX2 { return $self.mGen < $self.mGen.maxof; }
given Q isa QX2

 Q@  ->  @Q     # Keep circulating the tapes

  @  ->  @      # Or hold

== Rules (Maturity)
# Try to complete crystallization

given Q isa QX2
given N : ! ($curatom is QX2)
given X : ! ($curatom is QMembrane)

    Q@X -> .X@    # A bit too close, back off

  Q.X@.NN -> ..@X...  # Too far, not losing anybody

    QX  -> .@     # This is just weird so change it
     @      X
     .      .
     N      .
     N      .


   Q.X     ..@
     @  ->   X    # This too
     .       .
     N       .
     N       .

   Q_@  ->  ...   # This is what happy means to me

     @  -> @      # Nothing for me today
