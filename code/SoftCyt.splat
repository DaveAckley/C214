= element SoftCyt isa QCyt
\symbol SC
\color #5b5
\symmetries all
local typedef Unsigned(2) Mode;
local constant Mode cRESERVED = 0u;
local constant Mode cINBOUND = 1u;
local constant Mode cOUTBOUND = 2u;
local constant Mode cFREEZE = 3u;

== Data members
u DebugUtils du;
u Mode mState = cOUTBOUND;

== Methods
u HardCyt harden() {
.   HardCyt hc;
.   QCyt & qc = hc;
.   qc = (QCyt) self;
.   return hc;
. }

getColor {
.  if (mDie) return cu.color(0xffffffu); // White for death
.  ColorUtils.ARGB base = super.getColor($selector);
.  ColorUtils.ARGB flavor = cu.color(0x55bb55u);
.  if (mState == cINBOUND) flavor = cu.color(0x00dd00u);
.  if (mState == cOUTBOUND) flavor = cu.color(0xdd0000u);
.  if (mState == cFREEZE) flavor = cu.color(0x0000ddu);
.  return modulate(base,flavor);
. }

== Postrules (Inbound)
given @ isa SoftCyt : $self.mState == cINBOUND
vote h isa HardCyt
vote H isa HardCyt
given r : !$curatom is HardCyt
vote r : !$curatom is QMembrane
check @ {
.  if ($H.$nvotes > 0u && $h.$nvotes > 0u) {
.    HardCyt & h1 = (HardCyt&) ew[$H.$winsn];
.    HardCyt & h2 = (HardCyt&) ew[$h.$winsn];
.    if (h1.mRole >= h2.mRole) {
.      if (h1.mRole == h1.mRole.maxof) {
.        SoftCyt& sc = (SoftCyt&) $@.$winatom;
.        sc.mState = cOUTBOUND;
.      }
.    }
.    return true;
.  }
.  return false;
. }

   H.h    ...
   r@. -> @r.    # Drive by 1
   H.h    ...

   H.h    ...
   .r@ -> .@r    # Drive by 2
   H.h    ...

  rH@h    @.r.   # Hop over

   H.h    ...
    r      @
     @ ->   r    # Get off dime


== Postrules (Outbound)
given @ isa SoftCyt : $self.mState == cOUTBOUND
vote h isa HardCyt : $self.mServing
vote x : $curatom is Empty || $curatom is QMembrane
check @ {  // With drive-by updating
.  if ($h.$nvotes == 0u || $x.$nvotes == 0u) return false;
.  SoftCyt & sc = (SoftCyt &) ew[0];
.  HardCyt & hc = (HardCyt&) ew[$h.$winsn];
.  QHeading head;
.  if (!hc.mVision.getHeading(head)) return false;
.  // Get default orientation coord of target site
.  C2D c = ew.getCoord($x.$winsn);
.  if (!head.isCoordInDir(c)) return false;
.  if ($x.$winatom is QMembrane) sc.mState = cFREEZE;
.  else /* ($x.$winatom is Empty) */ ew.swap(0,$x.$winsn);
.  return true;
. }

   h      .
  x@x -> ...
   h      .

  hxh    ...
  x@x -> ...
  hxh    ...


== Postrules (Harden or decay)

given @ isa SoftCyt : $self.mState == cFREEZE

# Harden if we'd be in target

given h isa HardCyt : $self.mServing
check @ {
.  if ($h.$nvotes == 0u) return false;     // Nobody around?
.  HardCyt & hc = (HardCyt&) ew[$h.$winsn];
.  C2D ourpos = -ew.getCoord($h.$winsn); // We are at -pos with respect to their pos
.  EventWindow.SiteNum sn = ew.getSiteNumber(ourpos);  // Which would be sitenum 'sn'
.  return hc.siteShouldHarden(sn);                     // with the origin at them
. }

change @ isa SoftCyt { ew[0] = $self.harden(); }

   h.@   -> ..@

# Stay next to membrane

# vote i isa InnerMembrane

#    i      .
#   i@i -> ...
#    i      .

# Diffuse if not

   _@ -> @_

# Maybe decay
vote X : random.oneIn(1000)
change R isa Res

  X@ -> .R


== Postrules (Diffuse within matrix)

given @ isa SoftCyt
vote h isa HardCyt
given r : !$curatom is HardCyt
vote r : !$curatom is QMembrane
let x = r|h

check @ : $h.$nvotes > 0u && $r.$nvotes > 0u
change @ { ew.swap(0u,$r.$winsn); }

   hrh    ...
   r@r -> .@.    # Corner to face
   hrh    ...

    x      .
   x@x -> .@.    # Face to corner
    x      .

   @hr -> rh@    # Face to face

   @rh -> r@h    # Step off

== Postrules (0.1% decay, else hold)

change @ {
.  if (random.oddsOf(1,1000)) {
.    DebugUtils du;
.//    du.printContext();
.//    du.print("SOFT TISSUE DECAY");
.    ew[0] = Res.instanceof;
.  }
. }

   @ -> @
