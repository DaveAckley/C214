{47}  -*- text -*-
[0:

Wed Feb 20 03:00:03 2019 OK time for an ALIFE19 paper.  The goal is
some kind of more structured reproduction than we saw in the 2018
'cancer cells' demo.  The plan, such as it is, is

(1) to build a quasicrystal-like molecule, something like the
    generalized crystals from 2014 (like
    https://www.youtube.com/watch?v=C6h3gvaKE7E ) and then

(2) get them to move with something like the asymmetric diffusion from
    2011 ( https://youtu.be/ykeNAmJ8pa4 ), and

(3) put them all in some C211-like bag (like 2018), for some good
    reason -- perhaps using the membrne to sense the environment and
    determine when conditions are plausible

(4) to perform a reproduction by having each guy in the crystal twin
    and then pull apart.

[1:

Wed Feb 20 03:26:34 2019 Well but when you write it all down like that
it seems like a lot of work for three weeks to a finished paper.

[2:

Wed Feb 20 03:27:10 2019 So let's get some quick breakdown TODO to get
us started.

[3: Wed Feb 20 06:12:43 2019
DONE Quasicrystal.splat  :3] - Build a telomere-controlled quasicrystal in SPLAT, requiring

[4: DONE  :4] - Get SPLAT set up and working in this directory

Foggit let's just do that right now and then come back.  (Although I'm
tempted to say: That builds from Res. [5: Wed Feb 20 06:13:12 2019
DONE ResQX.splat :5])

:2]

:1]

:0]
[6:

Wed Feb 20 06:13:39 2019 So we currently are going for a distance 3
spacing but that really does seem pretty loose -- and folks get lost
pretty easily at the edges.  We're going to put in a C211 membrane to
help reduce edge losses, but thinking we should try a period 2
membrane.. [8:

Wed Feb 20 06:36:00 2019 And I want to go Res-controlled instead of
telomere-controlled.  But do we have any evidence C211 can really
withstand DReg?

:8]

:6]
[7:

Wed Feb 20 06:35:13 2019 Also fixed some bad error reporting in
splattr..  Nice to be able to do that a little..

:7]
[9:

Thu Feb 21 10:31:51 2019 OK, now into ../code/201902211027-c213/ and
working on the membrane more.  Sort have IM burning in a pretty
rickety ring oscillator, and want something more robust.  Also have
a general "controllable membrane permeability" feature running at a
cost of 16 bits.[10:

Thu Feb 21 10:35:47 2019 But let's make the permeability less general
and cut it down to say four bits with a hardcoded permeability table.

:10]

Planning on ditching telomere controlled guts growth in favor of Res
contolled, using controlled permeability to turn on and off Res uptake
to modulate growth.

:9][11:

Thu Feb 21 10:38:04 2019 And what about making a 1D guts?  We do need
to get back to programmability eventually.

TODO:

 - Permeability table

 - mExport as well?

 - Push DReg away harder

 - Go for a 'standing gradient' on IM instead of a ring burn.

:11]
[12:

Thu Feb 21 11:02:28 2019 Hmm, on the permeability table, what if we
didn't store anything, but instead looked for some content on the fly
to ask if _this_ piece of membrane is open to _this_ possible import
_right now_?  Push the decision (and any associated storage cost) back
onto the content rather than pulling it forward to the membrane 'for
efficiency'.  But could we make a rule that would ever fire?

:12]
[13:

Fri Feb 22 03:37:24 2019 So we like the just-ask-QContent-on-the-fly
approach to the import decision.  It's still stigmergic, at least from
the membrane's point of view, but it's much more flexible than mere
geometry.

So, now we've moved on to ALIFE19/code/201902220336-grad/, and our
goal is to ditch the ring burn oscillator for a standing gradient
stabilizer. [14:

Sat Feb 23 07:13:52 2019 OK we made a gradient stabilizer, buuuut
given how much the membrane moves around, it's not all that stable
either.  In particular, it's to keep a single 'gradient anchor' point
alive as the membrane grows and shrinks.  You can get a relatively
durable but potentially unbounded _group_ of anchors, or you can have
a single anchor that gets killed pretty often..

[15:

Sat Feb 23 07:16:01 2019 We're thinking screw the membrane stuff for
now, and the next stop should be getting the interior goo to have a
hybrid solid/liquid' nature.  Content in 'solid' mode crystallizes
into a (bounded) side 2 square, while content in 'liquid' mode moves
in the odd phase empty spaces among the solid.

:15]

:14]

:13]
[16:

Sat Feb 23 11:44:32 2019 Moving these notes to ../code/C213/notes/ to
get into the noo! sekrit! mimburrs ownlee! repo.

:16]
[17:

Sat Feb 23 11:57:30 2019 OK.  So let's do solid crystallization first
and alone.

TODO:

[19: DONE Sat Feb 23 14:22:20 2019   :19] - Restart QX2 as QCyt.splat, make it a quark

[21: DONE, though only H does anything  :21] - Have HardCyt and SoftCyt as subclasses

[20: DONE  :20] - Make HardCyt grow from Res, forming a side 2 square lattice

 - Define HardCyt 'support' as the number of aligned HC neighbors.
   Have HC decay back to Res if it sees IM..[18: Sat Feb 23 12:09:11
   2019 Later, later.  Just get started now  :18]

:17][22:

Sat Feb 23 14:22:58 2019 OK, so we're building a H matrix now.

TODO:

[23: Sat Feb 23 16:48:54 2019
DONE for HardCyt, but WNSE == sitenum-1 :23] - Make NSEW distance estimators, measured in terms of H matrix
   cells.

[24: Sat Feb 23 16:48:59 2019
DONE :24] - Have H settle towards size/position info in terms of distance
   estimators

[25: Sun Feb 24 03:50:12 2019
DONE :25] - Stop importing Res once estimators exceed some threshold

:22]
[26:

Sun Feb 24 03:50:22 2019 OK so the distance estimators are workingish,
although (surprise) using them to limit cell growth has some
unexpected consequences.  Since they measure distance-from-IM, if we
can neck down the membrane in the middle, the cell can grow
in sort of a figure-8 shape and basically double its volume..

Just like if it was reproducing...

:26][27:

Sun Feb 24 03:54:43 2019 So more

TODO:

[30: Sun Feb 24 05:57:57 2019
DONE :30] - Extend distance estimator to do not just 1+nghb in the 'axis'
   direction but also max(nghb) in the 'orthogonal' direction.
   Worried that will lead to 'ghost distances' but we need to try
   coupling across rows/columns somehow.

[32: Sun Feb 24 08:12:05 2019 Can even export DReg and import Res in one event!
DONE :32] - Export DReg.  Despite everything it managed to get into the cells
   on the evening/night long-run test.

 - Review/debug QMembrane rules.  We observed crosses and chipped caps
   in the long run.  We're not sure if we broke something that used to
   prevent/fix them, or if (we suspect) DReg is implicated in their
   formation, but either way nothing seemed to degrade or repair them.

            IO                   OO
    Cross:  OI    Chipped cap:   OIO

    We'd like chipped caps to fill:  oO_ -> ..O
    with o isa OM and O isa OM.      oIO    ...

                                      ___     ...
    At least, if there's nothing     oO__ -> ..O.
    confounding, perhaps like:       oIO_    ....

    Really not clear what to do about crosses but let's take another
    look.


 - Also saw stable edge-of-universe stubs we'd like to get rid of:

               ddd
    Edge stub: OIO   # d

 - (Probably,) Ditch HardCyt & SoftCyt as types in favor of just QCyt
   with a Bool mIsHard.  We're going to want to melt and freeze QCyt
   without losing all their state.

:27]
[28:

Sun Feb 24 04:53:42 2019 So we had restricted ourselves to
'\symmetries rotations' to keep our sanity, but combining that with
our getWestIndex and getNorthIndex concepts actually meant our 'max in
the orthogonal direction' implementation missed cases where a flip is
required to make 'north' be counter-clockwise to west.

So we just finishing rebuilding with '\symmetries all' and we're
predicting it will work better.[29:

Sun Feb 24 05:03:46 2019 Playing with that (it's working as we
expected) and just noticed that two away from a HardCyt it might be an
OM, and we better accept that as a basis for 0 distance to membrane!

:29]

:28]
[31:

Sun Feb 24 05:58:12 2019 So, the 1+axis, max(ortho) concept seems to
work pretty well and with some interesting properties.

 - Yes, there can be conflicts between trusting your neighbors
   estimates vs your own observations.  With one symmetry you may see,
   say membrane to the west, and so set your west distance, while with
   another symmetry you end up maxing with your north neighbor's west
   and get a non-zero score.

 - And those conflicts absolutely do cause instabilities in distance
   estimates, whenever a given HC is on a row or column that is not,
   in fact, the max width or height.

 - But we do _not_ see 'ghost' or zombie distances persisting
   indefinitely, so long as the main connectivity of the grid is
   intact.  To the contrary estimates quite quickly to only vary
   between plausible values given the current membrane shape.

 - (Now, if a DReg gets in and starts punching holes, that can
   eliminate some estimate propagation channels and leave bad
   estimates hanging in some cells.  But we're talking dementia by
   then in any case.)

 - And for the folk, if any, that are on a max width row and a max
   height column, their distance estimates are rock solid -- and such
   folk tend to be toward the middle of the cell, and thus plausible
   candidates for elevating to some more privileged status.

:31]
[33:

Sun Feb 24 09:48:01 2019 OK, so, doing a longer run we still see DReg
managing to raise havoc, sufficiently to disrupt the membrane an let
the cyt out which then plasters the universe (along with rogue
membrane biofilms).

So it's time to implement the ripcord for these guys, giving them a
collective identity tag and the ability to trigger apoptosis if things
go too far wrong.  We're going to have membrane just vanish while Cyt
will decay back to Res even though those are pretty inconsistent
stories relative to conservation of 'matter'.  (But, we're going to
say that such 'conservation laws' are design choices, not givens, in a
hosted physics.)

(We also still need to fix at least the chipped caps, because they're
still happening and they seem fixable.)

:33]
[34:

Sun Feb 24 09:56:27 2019 Buut what if we _don't_ have an identity tag?
What if we go on spatial grounds?  Triggered Cyt destroys all the Cyt
it can see; if that stretches into (what had been) another cell well
too bad for that other cell -- it shouldn't have gotten so close.

We'll need to deal with membrane decay separately, but we can think of
conditions for Cyt to punch out:

 (1) Cyt immediately adjacent to OM

 (2) Any Cyt mDistances reaches Distance.maxof

[35:

Sun Feb 24 10:00:52 2019 Let's see how far we can get on clean dying
without QID.splat..
[36:

Sun Feb 24 10:02:21 2019 Well, for that, some

TODO:

[37: Sun Feb 24 10:53:35 2019
DONE :37] - Rip the vestiges of telomere out of QCyt

[38: Sun Feb 24 10:53:40 2019
DONE :38] - Add a QCyt.mDie Bool propagating at max velocity

[39: Sun Feb 24 10:53:55 2019
DONE :39] - Get cases :34: 1-2 going

:36]
:35]

:34]
[40:

Sun Feb 24 10:54:08 2019 OK, so now we need QMembrane death, because
on oversize death we have residual Res that keeps the membrane from
collapsing all the way.

..but wait, we don't have enough residual Res, our HardCyt is not
decaying properly; why not?

:40]
[41:

Mon Feb 25 03:51:23 2019 OK so we have both HardCyt and QMembrane
decaying in reasonably plausible ways.  Still need to deal with
chipped caps; let's go for that.[42:

Mon Feb 25 03:53:35 2019 OK, so, why doesn't 'Put your cap on' already
deal with this?  In a 'given @ isa InnerMembrane' ruleset, we have
this:

 _____     .....
 __oo_     .o...
  o@o  ->   ...     # Put your cap on

Ah I guess it's because of the _ at LHS (4,1)?

..Wait, I guess the issue really isn't as specific as a chipped cap like

  _oo
  o@o

it's more like a 'dinged corner'

  _o     oo
  o@ ->  o@

except isn't that an awful small pattern to deploy comfortably?
How could that rule really be safe?

        oo.oo
  _oo   oo_oi
  oio   iioii
  oi     ioi

[43:

Mon Feb 25 04:09:31 2019 Well, trying it

  _o     o.
  o@ ->  ..

Does that mean we want to try 

  _i     i.
  i@ ->  ..

in the OM stabilization section?
[44:

Mon Feb 25 04:11:02 2019 Well, trying both.. But They Can't Be Right
They Are Too General![45:

Mon Feb 25 04:44:31 2019 Well, they might be Too General but so far
they seem to be fitting in with no ill effects..  Hard to believe we
didn't have them before.  Perhaps they used to be covered by something
we changed recently.

:45] 

:44]

:43]
:42]

:41]
[46:

Mon Feb 25 08:54:16 2019 OK well I guess we can claim clean dying at
this point.  We'd like to defend against DReg a little better than we
are so far -- cells seem to be dying within a few or several hours of
runtime -- but we'll revisit that later.  Thinking about a OM-mediated
fringe of external sensors/protectors that might push out the
controlled radius.

:46]
